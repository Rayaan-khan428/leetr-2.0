generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model friend_requests {
  id         String                  @id
  senderId   String
  receiverId String
  status     FriendshipRequestStatus
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  receiver   users                   @relation("ReceivedRequests", fields: [receiverId], references: [id])
  sender     users                   @relation("SentRequests", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model friendships {
  id        String   @id
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  user1     users    @relation("UserFriends", fields: [user1Id], references: [id])
  user2     users    @relation("UserFriendsWith", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

model user_problems {
  id              String     @id
  userId          String
  leetcodeId      String
  problemName     String
  difficulty      Difficulty
  solution        String?
  notes           String?
  solvedAt        DateTime   @default(now())
  attempts        Int        @default(1)
  timeComplexity  String?
  spaceComplexity String?
  url             String?
  nextReview      DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  users           users      @relation(fields: [userId], references: [id])

  @@unique([userId, leetcodeId])
}

model user_settings {
  id                 String   @id
  userId             String   @unique
  smsEnabled         Boolean  @default(true)
  emailNotifications Boolean  @default(true)
  friendActivitySMS  Boolean  @default(true)
  timezone           String   @default("UTC")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  users              users    @relation(fields: [userId], references: [id])
}

model user_statistics {
  id          String    @id
  userId      String    @unique
  streak      Int       @default(0)
  lastSolved  DateTime?
  totalSolved Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastStreak  Int       @default(0)
  maxStreak   Int       @default(0)
  users       users     @relation(fields: [userId], references: [id])
}

model users {
  id               String            @id
  firebaseUid      String            @unique
  email            String            @unique
  displayName      String?
  photoURL         String?
  phoneNumber      String?
  phoneVerified    Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  receivedRequests friend_requests[] @relation("ReceivedRequests")
  sentRequests     friend_requests[] @relation("SentRequests")
  friends          friendships[]     @relation("UserFriends")
  friendsWith      friendships[]     @relation("UserFriendsWith")
  user_problems    user_problems[]
  user_settings    user_settings?
  user_statistics  user_statistics?
}

enum FriendshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
